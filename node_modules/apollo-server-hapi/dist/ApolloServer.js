"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApolloServerPluginStopHapiServer = exports.ApolloServer = void 0;
const accept_1 = require("@hapi/accept");
var apollo_server_core_1 = require("apollo-server-core");
const apollo_server_core_2 = require("apollo-server-core");
const boom_1 = __importDefault(require("@hapi/boom"));
class ApolloServer extends apollo_server_core_2.ApolloServerBase {
    async createGraphQLServerOptions(request, h) {
        return super.graphQLServerOptions({ request, h });
    }
    async applyMiddleware({ app, cors, path, route, disableHealthCheck, onHealthCheck, }) {
        this.assertStarted('applyMiddleware');
        if (!path)
            path = '/graphql';
        const landingPage = this.getLandingPage();
        if (landingPage) {
            app.ext({
                type: 'onRequest',
                method: async (request, h) => {
                    if (request.path !== path && request.path !== `${path}/`) {
                        return h.continue;
                    }
                    if (request.method === 'get') {
                        const accept = (0, accept_1.parseAll)(request.headers);
                        const types = accept.mediaTypes;
                        const prefersHtml = types.find((x) => x === 'text/html' || x === 'application/json') === 'text/html';
                        if (prefersHtml) {
                            return h.response(landingPage.html).type('text/html').takeover();
                        }
                    }
                    return h.continue;
                },
            });
        }
        if (!disableHealthCheck) {
            app.route({
                method: '*',
                path: '/.well-known/apollo/server-health',
                options: {
                    cors: cors !== undefined ? cors : { origin: 'ignore' },
                },
                handler: async function (request, h) {
                    if (onHealthCheck) {
                        try {
                            await onHealthCheck(request);
                        }
                        catch {
                            const response = h.response({ status: 'fail' });
                            response.code(503);
                            response.type('application/health+json');
                            return response;
                        }
                    }
                    const response = h.response({ status: 'pass' });
                    response.type('application/health+json');
                    return response;
                },
            });
        }
        app.route({
            method: ['GET', 'POST'],
            path,
            options: route !== null && route !== void 0 ? route : {
                cors: cors !== null && cors !== void 0 ? cors : { origin: 'ignore' },
            },
            handler: async (request, h) => {
                try {
                    const { graphqlResponse, responseInit } = await (0, apollo_server_core_2.runHttpQuery)([request, h], {
                        method: request.method.toUpperCase(),
                        options: () => this.createGraphQLServerOptions(request, h),
                        query: request.method === 'post'
                            ?
                                request.payload
                            : request.query,
                        request: (0, apollo_server_core_2.convertNodeHttpToRequest)(request.raw.req),
                    }, this.csrfPreventionRequestHeaders);
                    const response = h.response(graphqlResponse);
                    if (responseInit.headers) {
                        Object.entries(responseInit.headers).forEach(([headerName, value]) => response.header(headerName, value));
                    }
                    response.code(responseInit.status || 200);
                    return response;
                }
                catch (error) {
                    if (!(0, apollo_server_core_2.isHttpQueryError)(error)) {
                        throw boom_1.default.boomify(error);
                    }
                    if (true === error.isGraphQLError) {
                        const response = h.response(error.message);
                        if (error.headers) {
                            Object.entries(error.headers).forEach(([headerName, value]) => {
                                response.header(headerName, value);
                            });
                        }
                        response.code(error.statusCode);
                        response.type('application/json');
                        return response;
                    }
                    const err = new boom_1.default.Boom(error.message, {
                        statusCode: error.statusCode,
                    });
                    if (error.headers) {
                        Object.entries(error.headers).forEach(([headerName, value]) => {
                            err.output.headers[headerName] = value;
                        });
                    }
                    err.output.payload.message = error.message;
                    throw err;
                }
            },
        });
        this.graphqlPath = path;
    }
}
exports.ApolloServer = ApolloServer;
function ApolloServerPluginStopHapiServer(options) {
    return {
        async serverWillStart() {
            return {
                async drainServer() {
                    await options.hapiServer.stop();
                },
            };
        },
    };
}
exports.ApolloServerPluginStopHapiServer = ApolloServerPluginStopHapiServer;
//# sourceMappingURL=ApolloServer.js.map